const crypto = require("crypto");

const BobPublicKeyPem = `-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAjp7yCF5ooYWwLZSWVfWh
X9F3VAedPH9skf7lMIPlOuEr5eEXDqjsfINbXcLkSA6QH7yxUWbjQGeLzvHUovTe
rwexQurnji1SqF+atyQxPzsw1lc0RvMUT2VVKpq2mZzhjnRax4WReSR2Xf6oXO21
YziWR2rxzv3TnRbUTLYA0zBoTH6Zns+lO3+D2SJ5YchjJilnCS3Ubc3TGR99Z5xk
jx8r62jXie+LBjiidVXTGVccgMP3O4+J8x2CMN/YKu8LdT9yeMfBbhdrt7r7q66T
BG6DrLMYVDVSA+6jhoWXFrxFSw+aALBJsgHFp1E3QcwESn0dhB8WPX0dETApFYfu
rQIDAQAB
-----END PUBLIC KEY-----`;
const BobPublicKey = crypto.createPublicKey(BobPublicKeyPem);

const BobPrivateKeyPem = `-----BEGIN PRIVATE KEY-----
MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQCOnvIIXmihhbAt
lJZV9aFf0XdUB508f2yR/uUwg+U64Svl4RcOqOx8g1tdwuRIDpAfvLFRZuNAZ4vO
8dSi9N6vB7FC6ueOLVKoX5q3JDE/OzDWVzRG8xRPZVUqmraZnOGOdFrHhZF5JHZd
/qhc7bVjOJZHavHO/dOdFtRMtgDTMGhMfpmez6U7f4PZInlhyGMmKWcJLdRtzdMZ
H31nnGSPHyvraNeJ74sGOKJ1VdMZVxyAw/c7j4nzHYIw39gq7wt1P3J4x8FuF2u3
uvurrpMEboOssxhUNVID7qOGhZcWvEVLD5oAsEmyAcWnUTdBzARKfR2EHxY9fR0R
MCkVh+6tAgMBAAECggEAAJJNMQWp9KTzXngs4Hw2T9M/Qkw7TMg9U2ivkHq7ekgj
upWn/oI8o0Y4xQps0nsUOo/No4UQ5dDvrrljiis/bQGGkc0DvDNWtfMJAk+GiJVV
qAnTYG/IMLAXiT662T/WZFBiesm+VwgES3TGVse15x6B6JpcjuE1dd+VMFrUsUkw
o58D6pkfBRPzy4uHrQ7TdgodaM1fPz+wgwrJ3NzGDe1VZ3s0+8LJ0SImFhqyOt4U
ADYU+0qStONLbT1P1g9q6vCbFClNNW3NahYrmCdNasSntYN1dofPRGhLmTK120MS
YROUFF3Y0ZrrChIkEfoOM62KCjhIfLdn3JyT0k8ZiQKBgQDCYL3+fBIYPK9Hw0eA
eShKaeOzpqugecraNVIN2WudcQNs0zomfObVkKZa+v5jdc/9+hdTbIScceA8b/U4
zmc2PnohRKR00A94mNPbd3GU2O/fULAHa8IOB19N17R0YNLQEfJb37TCCTrafPkS
naiYq2YYVg/sovfFLjtgyYNWCQKBgQC71blgx3pBsAkN5DrTQpxzUVSuOledM1py
1UNFVLfzztQ9uxPwL7L0v1wvkllQzDbUD6w5YWjCy1pcyNiaMk5AbI0WMKGBm8t+
zxml/bVoNqKFZmxxMtSmWzukRldbWXL9mSsChKmPQ8+w6AAOL3GvEpFUGJsQaxYk
Cj2CFplchQKBgAC4gRvXc+25E+FNPQ+h419bQyfgX1SJ/xGODw7UFo0P5TZbFiUc
Y3K5RZSix5ywzCOh8MIzbc5ysaUnuR4LzeAqnSNQcNeqCdSlpGt05uvpXgJS90Qf
xylsJ5NPUHD6Bu4UkvR6QN5TUG+M9RN3mC9wu0Et2INFG2wUvs2eEamZAoGBALKp
Fyp2klLonbQY4dsQAL+vHFycIbnknqObNeE8M7wzfq04xD4xIIarfYPCMDIqC/yo
66eof3zI76pRX7VLJCMjHQ9+MiCVj3mOg1bfey0kynEYew0wzBNvs8sNHQpGipms
lrxOcvlSBrq98U+M0RU1FAZpYRS8xtKA6wBRfo4BAoGBAIkZBzG0LZFx2o3sl55Q
KoYzqTpxM+VbAsstRlpo0k+eQBn8W+whGVRBBQnFnc+XRC6tH/I8K7u0TgA073od
YoH7FlSBW5ew7L432QrbE3Ew7ZO5tDoGBR3I/+OX5I0xkueIu3lfo0Cfwi6LFmOp
rtW7Sji2bjaKP64AB0bxXuUa
-----END PRIVATE KEY-----`;
const BobPrivateKey = crypto.createPrivateKey(BobPrivateKeyPem);

const AlicePublicKeyPem = `-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAu4eumSL9t4zGAV7NpzKe
qNblCuZ6LjMgF+ng3f4Sf+LJpWEW/GHjr2ip6YR7PfUG0A/Fl4/3bfhkURDpZ+ek
VkezjGWZpiy0BPNBA1BoP9L4mrCqhKyIPidX00aSBEiN9BB0hFlQAqKuWQtqX+5S
Egf5njDr1sAIxGzsxEqbsn2FwCR3zm+sgUqIWGxXpvzOXuQBNOy/zJYBm52OLevQ
Y920lQfi/Fp2qv0XDD6Gs8qUcsHlgxOLop8deo24Fu/DcZV61LEmNrNSxyipETMq
Bhu4TTTki3aaTtHeDRYZiGO/EX5zeonEwdofTC9dgMFc88eSniveJmZYLiWwplfX
/QIDAQAB
-----END PUBLIC KEY-----`;
const AlicePublicKey = crypto.createPublicKey(AlicePublicKeyPem);

const ciphertextHex = "7cbd8d1a079498aa8a65fc6e75c5653bc0935a828258d6f8285c177be8d22a9c7032350d3540133d8e6c4fd9dcfb2ba0495deaf76183bb7c1132af449f37a42b274950508e4cecd2538d45fe5f8c30311f17695f6ff24a61181057104d6d7aeb35d6f6e25081325712e84fefae1c98b620ae74587ae359fcd480f37c2e9eb60912f5957fa775dbb8b3c1e879cd1b76d02f07679245c71843984974ee1a2fde6adfc1bbd8dcaac7c9d6222a6fe0abb5fe92857756d5c0e3f4c3df53fafb1b0728d3f2fa31c59683fbaad6ecb44f86f5f310db2a13a5869da2460adef57519dabef663ec4848f06184afe56c96c813e6bb10f2919c96d9f8adfce334eaa9d18a70";
const ciphertext = Buffer.from(ciphertextHex, "hex");

const recoveredPlaintext = crypto.privateDecrypt(BobPrivateKey, ciphertext);
console.log("Recovered Plaintext:", recoveredPlaintext.toString("utf8"));

const signatureHex = "321b9c915cc16dfb3a5ea8dfb61b68c28b35d5107106d7a65619eae35363908ef67067a2d961007dc6dcc14716e1dfdc9b6b327a42c64a7bcbedfa7fe1ad9336053857daa97dd8c35cabe28eb4033ff56828a880b57b212346e80c1472cf938fb6eb2bc6d37695e265abcc633dc10f7f8b07e419ea6a5b23e8ec291ac543dc54dc11924e7975ba703dd3a41d27af6f36d7c521e3958af9234fcfae9255ba7113026db9fa8fe7046bcb13b6dc21b1783415bc877926bbed9d8daaea943deefc15ff723e00c4affb9d1ed8f81bc3b2643a06111bc45f7f6fb4c3c1717f89cb840f0a9d58294761eae1890e204c0b2ea400a09ea40b02c0700db07d55e9d862ef9c";
const signature = Buffer.from(signatureHex, "hex");

const isValid = crypto.verify("sha256", recoveredPlaintext, AlicePublicKey, signature);
console.log("RSA signature verified:", isValid);